{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","duration","easing","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","newItems","filteredItems","filter","setTimeout","onSubmit","placeholder","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAoCeA,MAhCf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAEpB,OAAO,yBAAKC,UAAY,OAAOC,IAAOF,EAAKE,KACvC,2BACI,2BAAOC,KAAK,OACZC,GAAMJ,EAAKE,IACXG,MAAOL,EAAKM,KACZC,SAAa,SAACC,GAEVZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QAG5C,4BACAS,QAAW,kBAAMf,EAAMgB,WAAWZ,EAAKE,MACvCD,UAAY,UAFZ,eASZ,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAY,IAAKC,OAAS,eAC/BjB,KCmEFkB,E,kDA3FZ,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IACFoB,MAAQ,CACXlB,MAAO,GACPmB,YAAY,CACZX,KAAK,GACLJ,IAAI,KAGN,EAAKgB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKP,WAAa,EAAKA,WAAWO,KAAhB,gBAClB,EAAKV,UAAY,EAAKA,UAAUU,KAAf,gBAZC,E,wDAgBRX,GAEVa,KAAKC,SAAS,CACZL,YAAY,CACVX,KAAKE,EAAEE,OAAOL,MACdH,IAAIqB,KAAKC,W,8BAMPhB,GACNA,EAAEiB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAC3B,GAAoB,KAAjBS,EAAQpB,KAAc,CACvB,IAAMqB,EAAQ,sBAAON,KAAKL,MAAMlB,OAAlB,CAAwB4B,IACtCL,KAAKC,SAAS,CACZxB,MAAM6B,EACNV,YAAY,CACVX,KAAK,GACLJ,IAAI,S,iCAQDA,GAGb,IAAM0B,EAAgBP,KAAKL,MAAMlB,MAAM+B,QAAO,SAAA7B,GAAI,OAChDA,EAAKE,MAAOA,KACZmB,KAAKC,SAAS,CACZxB,MAAM8B,M,gCAMGtB,EAAKJ,GACd,IAAMJ,EAAQuB,KAAKL,MAAMlB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAQA,IACbF,EAAKM,KAAKA,MAIfe,KAAKC,SAAS,CACZxB,MAAMA,IAGRgC,YAAW,cAET,O,+BAKF,OACE,yBAAK7B,UAAU,OACf,gCACE,0BAAMG,GAAI,aAAa2B,SAAYV,KAAKD,SACtC,2BAAOjB,KAAO,OAAO6B,YAAa,aAAa3B,MAASgB,KAAKL,MAAMC,YAAYX,KAC/EC,SAAYc,KAAKH,cACjB,4BAAQf,KAAK,UAAb,SAIJ,kBAAC,EAAD,CAAWM,UAAaY,KAAKZ,UAAYG,WAAcS,KAAKT,WAAYd,MAASuB,KAAKL,MAAMlB,a,GAxFhFmC,iBCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.73f7c93a.chunk.js","sourcesContent":["import './ListItems.css';\r\nimport React from 'react';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props) {\r\n    const items = props.items;\r\n    const listItems = items.map(item => \r\n        {\r\n            return <div className = \"list\" key = {item.key}>\r\n                <p>\r\n                    <input type=\"text\" \r\n                    id = {item.key} \r\n                    value={item.text}\r\n                    onChange = { (e) => {\r\n                        \r\n                        props.setUpdate(e.target.value,item.key)\r\n                    }}\r\n                     />\r\n                <button \r\n                onClick = {() => props.deleteItem(item.key)}\r\n                className = \"delete\">Remove</button>\r\n\r\n                </p>\r\n            </div>\r\n        \r\n    })\r\n    \r\n    return (\r\n        <div>  \r\n            <FlipMove duration = {300} easing = \"ease-in-out\">\r\n                {listItems}\r\n                </FlipMove>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default ListItems\r\n","import React, { PureComponent } from 'react'\nimport './App.css'\nimport ListItems from './ListItems'\nclass App extends PureComponent {\n  \n\n   constructor(props) {\n     super(props);\n    this.state = {\n      items :[],\n      currentItem:{\n      text:'',\n      key:'' \n    }\n  }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n \n   }\n\n  handleInput(e) {\n\n    this.setState({\n      currentItem:{\n        text:e.target.value,\n        key:Date.now()\n      }\n\n    })\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text !== \"\")  {\n      const newItems = [...this.state.items,newItem]\n      this.setState({\n        items:newItems,\n        currentItem:{\n          text:'',\n          key:''\n\n        }\n      })\n    }\n\n  }\n\n  deleteItem(key) \n  {\n\nconst filteredItems = this.state.items.filter(item =>\n  item.key !==key);\n  this.setState({\n    items:filteredItems\n  })\n\n\n  }\n\n  setUpdate (text,key) {\n    const items = this.state.items;\n    items.map(item => {\n      if(item.key === key) {\n         item.text=text;\n      }\n    });\n\n    this.setState({\n      items:items\n    })\n\n    setTimeout(() =>{\n\n    },1000)\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <header>\n        <form id =\"to-do-form\" onSubmit = {this.addItem}>\n          <input type = \"text\" placeholder =\"Enter Text\" value = {this.state.currentItem.text}\n          onChange = {this.handleInput}/>\n          <button type=\"submit\">Add</button>\n\n        </form>\n      </header>\n      <ListItems setUpdate = {this.setUpdate}  deleteItem = {this.deleteItem} items = {this.state.items} />\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}